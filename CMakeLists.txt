PROJECT(GPM)

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
SET(GPM_VERSION_MAJOR 0)
SET(GPM_VERSION_MINOR 2)
SET(GPM_VERSION_PATCH 0)
SET(GPM_VERSION ${GPM_VERSION_MAJOR}.${GPM_VERSION_MINOR}.${GPM_VERSION_PATCH})

ENABLE_LANGUAGE(CXX)

ENABLE_TESTING()

# Generate files with version info
CONFIGURE_FILE(include/GPM_version.h.in
               ${PROJECT_SOURCE_DIR}/include/GPM_version.h @ONLY)
CONFIGURE_FILE(test/fixupdebs.sh.in
               ${PROJECT_SOURCE_DIR}/test/fixupdebs.sh @ONLY)

# Add local modules
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}
                      ${CMAKE_SOURCE_DIR}/cmake/Modules)

# Required packages
FIND_PACKAGE(GoTools REQUIRED)
FIND_PACKAGE(GoTrivariate REQUIRED)

# Required libraries
SET(DEPLIBS ${GoTrivariate_LIBRARIES} ${GoTools_LIBRARIES})

# Required include directories
SET(INCLUDES
  ${GoTools_INCLUDE_DIRS}
  ${GoTrivariate_INCLUDE_DIRS}
  ${PROJECT_SOURCE_DIR}/include
)

INCLUDE_DIRECTORIES(${INCLUDES})

SET(EXECUTABLE_OUTPUT_PATH bin)
SET(LIBRARY_OUTPUT_PATH lib)

# This line may be needed only on AMD 64 bit... @jbt
# 091120: Adding this because GUV-plugins will need it. (J.O.)
IF(NOT WIN32)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
ENDIF(NOT WIN32)

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GoTools_CXX_FLAGS}")

# Enable all warnings
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")

# Make the GPM library
FILE(GLOB_RECURSE GPM_SRCS ${PROJECT_SOURCE_DIR}/src/SplineModel.cpp
                           ${PROJECT_SOURCE_DIR}/src/TopologySet.cpp
                           ${PROJECT_SOURCE_DIR}/src/Line.cpp
                           ${PROJECT_SOURCE_DIR}/src/Volume.cpp
                           ${PROJECT_SOURCE_DIR}/src/Vertex.cpp
                           ${PROJECT_SOURCE_DIR}/src/Face.cpp)
ADD_LIBRARY(GPM ${GPM_SRCS})
TARGET_LINK_LIBRARIES(GPM ${DEPLIBS})

# Make the Apps
FILE(GLOB_RECURSE getGNO_SRCS ${PROJECT_SOURCE_DIR}/src/main_getGNO.cpp)
ADD_EXECUTABLE(getGNO ${getGNO_SRCS})
TARGET_LINK_LIBRARIES(getGNO GPM ${DEPLIBS})

FILE(GLOB_RECURSE getPROP_SRCS ${PROJECT_SOURCE_DIR}/src/main_getPROP.cpp)
ADD_EXECUTABLE(getPROP ${getPROP_SRCS})
TARGET_LINK_LIBRARIES(getPROP GPM ${DEPLIBS})

FILE(GLOB_RECURSE refine_SRCS ${PROJECT_SOURCE_DIR}/src/main_refine.cpp)
ADD_EXECUTABLE(refine ${refine_SRCS})
TARGET_LINK_LIBRARIES(refine GPM ${DEPLIBS})

FILE(GLOB_RECURSE enforceRHS_SRCS ${PROJECT_SOURCE_DIR}/src/main_enforceRHS.cpp)
ADD_EXECUTABLE(enforceRHS ${enforceRHS_SRCS})
TARGET_LINK_LIBRARIES(enforceRHS GPM ${DEPLIBS})

FILE(GLOB_RECURSE orderElevation_SRCS ${PROJECT_SOURCE_DIR}/src/main_orderElevation.cpp)
ADD_EXECUTABLE(orderElevation ${orderElevation_SRCS})
TARGET_LINK_LIBRARIES(orderElevation ${DEPLIBS})

FILE(GLOB_RECURSE orderReduction_SRCS ${PROJECT_SOURCE_DIR}/src/main_orderReduction.cpp)
ADD_EXECUTABLE(orderReduction ${orderReduction_SRCS})
TARGET_LINK_LIBRARIES(orderReduction ${DEPLIBS})

FILE(GLOB_RECURSE raiseOrder_SRCS ${PROJECT_SOURCE_DIR}/src/main_raiseOrder.cpp)
ADD_EXECUTABLE(raiseOrder ${raiseOrder_SRCS})
TARGET_LINK_LIBRARIES(raiseOrder ${DEPLIBS})

IF(NOT GPM_INSTALL_PREFIX)
  SET(GPM_INSTALL_PREFIX $ENV{HOME})
ENDIF(NOT GPM_INSTALL_PREFIX)

# Regression tests
FILE(GLOB_RECURSE REFINE_TESTFILES "${PROJECT_SOURCE_DIR}/test/Refine/*.reg")
FOREACH(TESTFILE ${REFINE_TESTFILES})
  ADD_TEST(${TESTFILE} ${PROJECT_SOURCE_DIR}/test/regtest.sh "${CMAKE_BINARY_DIR}/${EXECUTABLE_OUTPUT_PATH}/refine" "${TESTFILE}")
ENDFOREACH()

# 'install' target
IF(WIN32)
  # TODO
ELSE(WIN32)
  # lib
  INSTALL(TARGETS GPM DESTINATION ${CMAKE_INSTALL_PREFIX}/lib COMPONENT bin)
  INSTALL(TARGETS refine DESTINATION ${CMAKE_INSTALL_PREFIX}/bin COMPONENT bin)
  INSTALL(TARGETS getGNO DESTINATION ${CMAKE_INSTALL_PREFIX}/bin COMPONENT bin)
  INSTALL(TARGETS enforceRHS DESTINATION ${CMAKE_INSTALL_PREFIX}/bin COMPONENT bin)
  INSTALL(TARGETS orderElevation DESTINATION ${CMAKE_INSTALL_PREFIX}/bin COMPONENT bin)
  INSTALL(TARGETS orderReduction DESTINATION ${CMAKE_INSTALL_PREFIX}/bin COMPONENT bin)
  INSTALL(TARGETS raiseOrder DESTINATION ${CMAKE_INSTALL_PREFIX}/bin COMPONENT bin)

  # headers
  FILE(GLOB_RECURSE GPM_HEADERS include/*.h)
  INSTALL(FILES ${GPM_HEADERS}
          DESTINATION include/GPM COMPONENT dev)

  # cmake modules
  INSTALL(FILES cmake/Modules/FindGPM.cmake
          DESTINATION ${CMAKE_ROOT}/Modules
          COMPONENT dev)
ENDIF(WIN32)

# Packaging
EXECUTE_PROCESS(COMMAND lsb_release "-sc" OUTPUT_VARIABLE CODENAME)
STRING(REGEX REPLACE "\n" "" SYSTEM_CODENAME ${CODENAME})
EXECUTE_PROCESS(COMMAND lsb_release "-si" OUTPUT_VARIABLE VENDOR)
STRING(REGEX REPLACE "\n" "" SYSTEM_VENDOR ${VENDOR})

IF (SYSTEM_VENDOR STREQUAL "Ubuntu" OR SYSTEM_VENDOR STREQUAL "Debian")
  EXECUTE_PROCESS(COMMAND dpkg --print-architecture OUTPUT_VARIABLE ARCHITECTURE)
  STRING(REGEX REPLACE "\n" "" CPACK_DEBIAN_PACKAGE_ARCHITECTURE ${ARCHITECTURE})
  SET(SYSTEM_ARCHITECTURE ${CPACK_DEBIAN_PACKAGE_ARCHITECTURE})
  SET(CPACK_GENERATOR "DEB")
  SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "Arne Morten Kvarving <arne.morten.kvarving@sintef.no>")
  SET(CPACK_DEBIAN_PACKAGE_DEPENDS "libgotools-core, libgotools-trivariate")
  SET(CPACK_DEB_COMPONENT_INSTALL ON)
ENDIF (SYSTEM_VENDOR STREQUAL "Ubuntu" OR SYSTEM_VENDOR STREQUAL "Debian")

SET(CPACK_PACKAGE_NAME "libifem-gpm")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "IFEM - the isogemetric finite element library - geometry preprocessing module")
SET(CPACK_PACKAGE_VERSION "${GPM_VERSION}")
SET(CPACK_PACKAGE_VERSION_MAJOR ${GPM_VERSION_MAJOR})
SET(CPACK_PACKAGE_VERSION_MINOR ${GPM_VERSION_MINOR})
SET(CPACK_PACKAGE_VERSION_PATCH ${GPM_VERSION_PATCH})
SET(CPACK_PACKAGE_FILE_NAME "libifem-gpm_${CPACK_PACKAGE_VERSION}_${SYSTEM_ARCHITECTURE}-${SYSTEM_CODENAME}")
SET(CPACK_COMPONENTS_ALL bin dev)
#SET(CPACK_RESOURCE_FILE_LICENSE ${PROJECT_SOURCE_DIR}/COPYING)
SET(CPACK_STRIP_FILES "bin/getGNO;bin/enforceRHS;bin/getPROP;bin/orderElevation;bin/refine")

INCLUDE(CPack)

ADD_CUSTOM_TARGET(ubuntu 
                  COMMAND make package
                  COMMAND ${PROJECT_SOURCE_DIR}/test/fixupdebs.sh
                  COMMAND echo "All done. Packages are in UbuntuDebs/"
                  COMMENT "Generating and fixing up Ubuntu packages" VERBATIM)
