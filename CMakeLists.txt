PROJECT(GPM)

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
SET(GPM_VERSION_MAJOR 0)
SET(GPM_VERSION_MINOR 3)
SET(GPM_VERSION_PATCH 7)
SET(GPM_VERSION ${GPM_VERSION_MAJOR}.${GPM_VERSION_MINOR}.${GPM_VERSION_PATCH})

ENABLE_LANGUAGE(CXX)

ENABLE_TESTING()

# Generate files with version info
CONFIGURE_FILE(include/GPM_version.h.in
               ${PROJECT_SOURCE_DIR}/include/GPM_version.h @ONLY)

# Required packages
FIND_PACKAGE(GoTools REQUIRED)
FIND_PACKAGE(GoTrivariate REQUIRED)
FIND_PACKAGE(Doxygen)

INCLUDE(cmake/Modules/UseMultiArch.cmake)

# Required libraries
SET(DEPLIBS ${GoTrivariate_LIBRARIES} ${GoTools_LIBRARIES})

# Required include directories
SET(INCLUDES
  ${GoTools_INCLUDE_DIRS}
  ${GoTrivariate_INCLUDE_DIRS}
  ${PROJECT_SOURCE_DIR}/include
)

INCLUDE_DIRECTORIES(${INCLUDES})

SET(EXECUTABLE_OUTPUT_PATH bin)
SET(LIBRARY_OUTPUT_PATH lib)

# This line may be needed only on AMD 64 bit... @jbt
# 091120: Adding this because GUV-plugins will need it. (J.O.)
IF(NOT WIN32)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -std=c++11")
ENDIF(NOT WIN32)

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GoTools_CXX_FLAGS}")

# Enable all warnings
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")

# Make the GPM library
FILE(GLOB_RECURSE GPM_SRCS ${PROJECT_SOURCE_DIR}/src/SplineModel.cpp
                           ${PROJECT_SOURCE_DIR}/src/TopologySet.cpp
                           ${PROJECT_SOURCE_DIR}/src/Line.cpp
                           ${PROJECT_SOURCE_DIR}/src/Volume.cpp
                           ${PROJECT_SOURCE_DIR}/src/Vertex.cpp
                           ${PROJECT_SOURCE_DIR}/src/Face.cpp)
ADD_LIBRARY(GPM ${GPM_SRCS})
TARGET_LINK_LIBRARIES(GPM ${DEPLIBS})
SET_TARGET_PROPERTIES(GPM PROPERTIES SOVERSION ${GPM_VERSION_MAJOR}.${GPM_VERSION_MINOR})

# Make the Apps
FILE(GLOB_RECURSE getGNO_SRCS ${PROJECT_SOURCE_DIR}/src/main_getGNO.cpp)
ADD_EXECUTABLE(getGNO ${getGNO_SRCS})
TARGET_LINK_LIBRARIES(getGNO GPM ${DEPLIBS})

FILE(GLOB_RECURSE getPROP_SRCS ${PROJECT_SOURCE_DIR}/src/main_getPROP.cpp)
ADD_EXECUTABLE(getPROP ${getPROP_SRCS})
TARGET_LINK_LIBRARIES(getPROP GPM ${DEPLIBS})

FILE(GLOB_RECURSE refine_SRCS ${PROJECT_SOURCE_DIR}/src/main_refine.cpp)
ADD_EXECUTABLE(refine ${refine_SRCS})
TARGET_LINK_LIBRARIES(refine GPM ${DEPLIBS})

FILE(GLOB_RECURSE enforceRHS_SRCS ${PROJECT_SOURCE_DIR}/src/main_enforceRHS.cpp)
ADD_EXECUTABLE(enforceRHS ${enforceRHS_SRCS})
TARGET_LINK_LIBRARIES(enforceRHS GPM ${DEPLIBS})

FILE(GLOB_RECURSE convert_SRCS ${PROJECT_SOURCE_DIR}/src/main_convert.cpp)
ADD_EXECUTABLE(convert ${convert_SRCS})
TARGET_LINK_LIBRARIES(convert GPM ${DEPLIBS})

FILE(GLOB_RECURSE orderElevation_SRCS ${PROJECT_SOURCE_DIR}/src/main_orderElevation.cpp)
ADD_EXECUTABLE(orderElevation ${orderElevation_SRCS})
TARGET_LINK_LIBRARIES(orderElevation ${DEPLIBS})

FILE(GLOB_RECURSE orderReduction_SRCS ${PROJECT_SOURCE_DIR}/src/main_orderReduction.cpp)
ADD_EXECUTABLE(orderReduction ${orderReduction_SRCS})
TARGET_LINK_LIBRARIES(orderReduction ${DEPLIBS})

FILE(GLOB_RECURSE raiseOrder_SRCS ${PROJECT_SOURCE_DIR}/src/main_raiseOrder.cpp)
ADD_EXECUTABLE(raiseOrder ${raiseOrder_SRCS})
TARGET_LINK_LIBRARIES(raiseOrder ${DEPLIBS})

IF(NOT GPM_INSTALL_PREFIX)
  SET(GPM_INSTALL_PREFIX $ENV{HOME})
ENDIF(NOT GPM_INSTALL_PREFIX)

# Regression tests
FILE(GLOB_RECURSE REFINE_TESTFILES "${PROJECT_SOURCE_DIR}/test/Refine/*.reg")
FOREACH(TESTFILE ${REFINE_TESTFILES})
  ADD_TEST(${TESTFILE} ${PROJECT_SOURCE_DIR}/test/regtest.sh "${CMAKE_BINARY_DIR}/${EXECUTABLE_OUTPUT_PATH}/refine" "${TESTFILE}")
ENDFOREACH()

# 'install' target
IF(WIN32)
  # TODO
ELSE(WIN32)
  # For generating the doxy
  IF(DOXYGEN_FOUND)
    ADD_CUSTOM_TARGET(doc ${DOXYGEN_EXECUTABLE}
                      WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
                      COMMENT "Generating API documentation" VERBATIM)
    INSTALL(CODE "EXECUTE_PROCESS(COMMAND ${CMAKE_BUILD_TOOL} doc WORKING_DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}\")" COMPONENT doc)

    INSTALL(DIRECTORY doc/html/ DESTINATION share/doc/libifem-gpm1/html)
  ENDIF()
  # lib
  INSTALL(TARGETS GPM DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT bin)
  INSTALL(TARGETS refine DESTINATION bin COMPONENT bin)
  INSTALL(TARGETS getGNO DESTINATION bin COMPONENT bin)
  INSTALL(TARGETS enforceRHS DESTINATION bin COMPONENT bin)
  INSTALL(TARGETS orderElevation DESTINATION bin COMPONENT bin)
  INSTALL(TARGETS orderReduction DESTINATION bin COMPONENT bin)
  INSTALL(TARGETS raiseOrder DESTINATION bin COMPONENT bin)
  INSTALL(TARGETS convert DESTINATION bin COMPONENT bin)

  # headers
  FILE(GLOB_RECURSE GPM_HEADERS include/*.h)
  INSTALL(FILES ${GPM_HEADERS}
          DESTINATION include/GPM COMPONENT dev)

  # cmake modules
  configure_file(cmake/GPMConfig.cmake.in GPMConfig.cmake)
  INSTALL(FILES ${CMAKE_BINARY_DIR}/GPMConfig.cmake
          DESTINATION lib/GPM
          COMPONENT dev)
ENDIF(WIN32)
